{
  "def": "Function Keyword",
  "return": "Return Keyword",
  "pass": "Pass Keyword",
  "if": "IF Keyword",
  "else": "ELSE Keyword",
  "elif": "ELSE IF Keyword",
  "for": "FOR Keyword",
  "in": "IN Keyword",
  "while": "WHILE Keyword",
  "break": "Break Keyword",
  "continue": "Continue Keyword",
  "not": "LogicNeg Unary Operator Keyword",
  "and": "AND Operator Keyword",
  "or": "OR Operator Keyword",
  "0x": "Hex Number Keyword",
  "0b": "Bin Number Keyword",
  "0o": "Oct Number Keyword",

  "&": "AND Operator Bitwise",
  "^": "XOR Operator Bitwise",
  "|": "OR Operator Bitwise",

  ">>": " Operator Bitwise Right",
  "<<": " Operator Bitwise Left",

  "==": " Operator Equal To",
  "!=": " Operator Not Equal To",
  ">": " Operator More Than",
  ">=": " Operator More Than or Equal",
  "<": " Operator Less Than",
  "<=": " Operator Less Than or Equal",

  "=": "Assignment Operator",
  "+=": "Assignment and Add Operator",
  "-=": "Assignment and Sub Operator",
  "*=": "Assignment and Mul Operator",
  "/=": "Assignment and Div Operator",
  "%=": "Assignment and Mod Operator",
  "&=": "Assignment and And Operator",
  "^=": "Assignment and Xor Operator",
  "|=": "Assignment and Or Operator",
  ">>=": "Assignment and SR Operator",
  "<<=": "Assignment and SL Operator",

  "**": "Power Operator",
  "+": "Add Operator",
  "*": "Mult Operator",
  "/": "Div Operator",
  "%": "Module Operator",

  "-": "Neg Unary Operator",
  "~": "Bitwise Unary Operator",

  ":": "Start Block",
  " ": "Space",
  "    ": "Block",
  "\t": "Block",
  ",": "Comma",
  ";": "Lines Separation",
  "(": "Open Parentheses",
  ")": "Close Parentheses",
  "'": "Quote Mark",
  "\"": "Quote Mark"
}
